#include "vector3.h"

/*
 * A simple 3-dimensional vector with basic vector math implemented 
 * using operator overloading.
 */
Vector3::Vector3(float x, float y, float z) {
    this->x = x;
    this->y = y;
    this->z = z;
}

Vector3 Vector3::operator + (const Vector3& right) {
    Vector3 result;
    result.x = right.x + this->x;
    result.y = right.y + this->y;
    result.z = right.z + this->z;
    return result;
}

Vector3 Vector3::operator - (const Vector3& right) {
    Vector3 result;
    result.x = right.x - this->x;
    result.y = right.y - this->y;
    result.z = right.z - this->z;
    return result;
}

Vector3 Vector3::operator * (float scalar) {
    Vector3 result;
    result.x = scalar * this->x;
    result.y = scalar * this->y;
    result.z = scalar * this->z;
    return result;
}

Vector3 Vector3::operator / (float scalar) {
    Vector3 result;
    result.x = scalar / this->x;
    result.y = scalar / this->y;
    result.z = scalar / this->z;
    return result;
}

Vector3& Vector3::operator += (const Vector3& right) {
    this->x += right.x;
    this->y += right.y;
    this->z += right.z;
    return *this;
}

Vector3& Vector3::operator -= (const Vector3& right) {
    this->x -= right.x;
    this->y -= right.y;
    this->z -= right.z;
    return *this;
}

float Vector3::scalar_product(const Vector3& left, const Vector3& right) {
    return left.x * right.x + left.y * right.y + left.z * right.z;
}

